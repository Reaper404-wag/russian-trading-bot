"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import numpy as np
from datetime import datetime, timedelta
from services.technical_analyzer import TechnicalAnalyzer, TechnicalIndicators


def generate_sample_market_data(symbol: str, days: int = 100) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        symbol: –¢–∏–∫–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∞–∫—Ü–∏–∏
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
    
    # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π
    base_prices = {
        'SBER': 280.0,
        'GAZP': 180.0,
        'LKOH': 6500.0,
        'ROSN': 550.0,
        'NVTK': 1200.0,
        'YNDX': 2800.0,
        'MGNT': 6000.0,
        'GMKN': 18000.0
    }
    
    base_price = base_prices.get(symbol, 100.0)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
    closes = []
    highs = []
    lows = []
    
    current_price = base_price
    
    for i in range(days):
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ (–æ–±—ã—á–Ω–æ –≤—ã—à–µ –º–∏—Ä–æ–≤–æ–≥–æ)
        daily_change = np.random.normal(0, 0.03)  # 3% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
        trend = 0.001 * np.sin(i / 20)  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
        
        current_price *= (1 + daily_change + trend)
        current_price = max(current_price, base_price * 0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º high/low –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        intraday_range = current_price * 0.02  # 2% –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        high = current_price + np.random.uniform(0, intraday_range)
        low = current_price - np.random.uniform(0, intraday_range)
        
        closes.append(round(current_price, 2))
        highs.append(round(high, 2))
        lows.append(round(low, 2))
    
    return {
        'close': closes,
        'high': highs,
        'low': lows,
        'symbol': symbol
    }


def demonstrate_technical_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π"""
    
    print("üá∑üá∫ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ MOEX")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = TechnicalAnalyzer()
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π
    russian_stocks = ['SBER', 'GAZP', 'LKOH', 'ROSN', 'NVTK']
    
    for stock in russian_stocks:
        print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏ {stock}")
        print("-" * 40)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_data = generate_sample_market_data(stock, 60)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = analyzer.calculate_all_indicators(stock, market_data)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"–¢–∏–∫–µ—Ä: {indicators.symbol}")
        print(f"–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞: {indicators.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        if indicators.rsi:
            print(f"RSI (14): {indicators.rsi:.2f}")
            if indicators.rsi < 25:
                print("  üü¢ –°–∏–≥–Ω–∞–ª: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–∫—É–ø–∫–∞)")
            elif indicators.rsi > 75:
                print("  üî¥ –°–∏–≥–Ω–∞–ª: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞)")
            else:
                print("  üü° –°–∏–≥–Ω–∞–ª: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")
        
        # MACD
        if indicators.macd and indicators.macd_signal:
            print(f"MACD: {indicators.macd:.4f}")
            print(f"MACD Signal: {indicators.macd_signal:.4f}")
            print(f"MACD Histogram: {indicators.macd_histogram:.4f}")
            
            if indicators.macd > indicators.macd_signal:
                print("  üü¢ MACD: –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
            else:
                print("  üî¥ MACD: –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        if indicators.sma_20 and indicators.sma_50:
            print(f"SMA(20): {indicators.sma_20:.2f} ‚ÇΩ")
            print(f"SMA(50): {indicators.sma_50:.2f} ‚ÇΩ")
            
            if indicators.sma_20 > indicators.sma_50:
                print("  üü¢ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥: –í–æ—Å—Ö–æ–¥—è—â–∏–π")
            else:
                print("  üî¥ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥: –ù–∏—Å—Ö–æ–¥—è—â–∏–π")
        
        # –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
        if all([indicators.bollinger_upper, indicators.bollinger_middle, indicators.bollinger_lower]):
            print(f"Bollinger Bands:")
            print(f"  –í–µ—Ä—Ö–Ω—è—è: {indicators.bollinger_upper:.2f} ‚ÇΩ")
            print(f"  –°—Ä–µ–¥–Ω—è—è: {indicators.bollinger_middle:.2f} ‚ÇΩ")
            print(f"  –ù–∏–∂–Ω—è—è: {indicators.bollinger_lower:.2f} ‚ÇΩ")
            print(f"  –®–∏—Ä–∏–Ω–∞: {indicators.bollinger_width:.2f}%")
            
            current_price = market_data['close'][-1]
            if current_price <= indicators.bollinger_lower:
                print("  üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã (–≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–∫—É–ø–∫–∞)")
            elif current_price >= indicators.bollinger_upper:
                print("  üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã (–≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞)")
            else:
                print("  üü° –¶–µ–Ω–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
        
        # ATR (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
        if indicators.atr:
            print(f"ATR (14): {indicators.atr:.2f} ‚ÇΩ")
            current_price = market_data['close'][-1]
            volatility_percent = (indicators.atr / current_price) * 100
            print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_percent:.2f}%")
            
            if volatility_percent > 5:
                print("  ‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            elif volatility_percent < 2:
                print("  üò¥ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            else:
                print("  üìä –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
        
        # –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
        if indicators.stochastic_k and indicators.stochastic_d:
            print(f"Stochastic %K: {indicators.stochastic_k:.2f}")
            print(f"Stochastic %D: {indicators.stochastic_d:.2f}")
            
            if indicators.stochastic_k < 20:
                print("  üü¢ Stochastic: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
            elif indicators.stochastic_k > 80:
                print("  üî¥ Stochastic: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
            else:
                print("  üü° Stochastic: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")
        
        # –û–±—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        signals = analyzer.get_market_signal(indicators)
        print(f"\nüéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
        for indicator_name, signal in signals.items():
            emoji = "üü¢" if signal == "–ü–û–ö–£–ü–ö–ê" else "üî¥" if signal == "–ü–†–û–î–ê–ñ–ê" else "üü°"
            print(f"  {emoji} {indicator_name.upper()}: {signal}")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        buy_signals = sum(1 for signal in signals.values() if signal == "–ü–û–ö–£–ü–ö–ê")
        sell_signals = sum(1 for signal in signals.values() if signal == "–ü–†–û–î–ê–ñ–ê")
        
        print(f"\nüìä –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:")
        print(f"  –°–∏–≥–Ω–∞–ª—ã –ø–æ–∫—É–ø–∫–∏: {buy_signals}")
        print(f"  –°–∏–≥–Ω–∞–ª—ã –ø—Ä–æ–¥–∞–∂–∏: {sell_signals}")
        
        if buy_signals > sell_signals:
            print("  üü¢ –û–±—â–∏–π —Å–∏–≥–Ω–∞–ª: –ü–û–ö–£–ü–ö–ê")
        elif sell_signals > buy_signals:
            print("  üî¥ –û–±—â–∏–π —Å–∏–≥–Ω–∞–ª: –ü–†–û–î–ê–ñ–ê")
        else:
            print("  üü° –û–±—â–∏–π —Å–∏–≥–Ω–∞–ª: –ù–ï–ô–¢–†–ê–õ–¨–ù–û")


def demonstrate_individual_indicators():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    print("\n\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("=" * 60)
    
    analyzer = TechnicalAnalyzer()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –°–±–µ—Ä–±–∞–Ω–∫–∞
    market_data = generate_sample_market_data('SBER', 100)
    prices = market_data['close']
    highs = market_data['high']
    lows = market_data['low']
    
    print(f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(prices)} –¥–Ω–µ–π —Ç–æ—Ä–≥–æ–≤ SBER")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {min(prices):.2f} - {max(prices):.2f} ‚ÇΩ")
    print()
    
    # RSI
    print("üìä RSI (Relative Strength Index)")
    rsi = analyzer.calculate_rsi(prices)
    print(f"RSI(14): {rsi:.2f}")
    
    if rsi < 30:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –ê–∫—Ü–∏—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–∞, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫")
    elif rsi > 70:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –ê–∫—Ü–∏—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è")
    else:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")
    print()
    
    # MACD
    print("üìà MACD (Moving Average Convergence Divergence)")
    macd, signal, histogram = analyzer.calculate_macd(prices)
    print(f"MACD Line: {macd:.4f}")
    print(f"Signal Line: {signal:.4f}")
    print(f"Histogram: {histogram:.4f}")
    
    if macd > signal:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª, –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å")
    else:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª, –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å")
    print()
    
    # –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
    print("üìä Bollinger Bands")
    bollinger = analyzer.calculate_bollinger_bands(prices)
    print(f"–í–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ—Å–∞: {bollinger['bollinger_upper']:.2f} ‚ÇΩ")
    print(f"–°—Ä–µ–¥–Ω—è—è –ø–æ–ª–æ—Å–∞: {bollinger['bollinger_middle']:.2f} ‚ÇΩ")
    print(f"–ù–∏–∂–Ω—è—è –ø–æ–ª–æ—Å–∞: {bollinger['bollinger_lower']:.2f} ‚ÇΩ")
    print(f"–®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å: {bollinger['bollinger_width']:.2f}%")
    
    current_price = prices[-1]
    if current_price > bollinger['bollinger_upper']:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è")
    elif current_price < bollinger['bollinger_lower']:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫")
    else:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –¶–µ–Ω–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
    print()
    
    # ATR
    print("üìä ATR (Average True Range)")
    atr = analyzer.calculate_atr(highs, lows, prices)
    print(f"ATR(14): {atr:.2f} ‚ÇΩ")
    volatility_percent = (atr / current_price) * 100
    print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_percent:.2f}%")
    print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥")
    print()
    
    # –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
    print("üìä Stochastic Oscillator")
    stoch_k, stoch_d = analyzer.calculate_stochastic(highs, lows, prices)
    print(f"%K: {stoch_k:.2f}")
    print(f"%D: {stoch_d:.2f}")
    
    if stoch_k < 20:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–∫—É–ø–∫–∞")
    elif stoch_k > 80:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞")
    else:
        print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")


def demonstrate_russian_market_adaptations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞"""
    
    print("\n\nüá∑üá∫ –ê–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞")
    print("=" * 50)
    
    analyzer = TechnicalAnalyzer()
    
    print("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞:")
    print(f"‚Ä¢ RSI –ø–æ—Ä–æ–≥–∏: 25/75 (–≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö 30/70)")
    print(f"‚Ä¢ Bollinger Bands: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ {analyzer.volatility_adjustment}")
    print(f"‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π")
    print(f"‚Ä¢ –£—á–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π MOEX")
    print()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ RSI
    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ RSI:")
    test_rsi_values = [20, 25, 30, 70, 75, 80]
    
    for rsi_val in test_rsi_values:
        indicators = TechnicalIndicators(
            symbol="TEST",
            timestamp=datetime.now(),
            rsi=rsi_val
        )
        
        signals = analyzer.get_market_signal(indicators)
        rsi_signal = signals.get('rsi', '–ù–ï–¢ –î–ê–ù–ù–´–•')
        
        print(f"  RSI {rsi_val}: {rsi_signal}")
    
    print("\n–í–∏–¥–Ω–æ, —á—Ç–æ –ø–æ—Ä–æ–≥–∏ 25/75 –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞")


if __name__ == "__main__":
    try:
        demonstrate_technical_analysis()
        demonstrate_individual_indicators()
        demonstrate_russian_market_adaptations()
        
        print("\n\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("–í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ MOEX")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()