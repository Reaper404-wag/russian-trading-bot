"""
Example usage of Russian market alert system
Demonstrates email, Telegram, and SMS notifications
"""

import asyncio
import logging
from decimal import Decimal
from datetime import datetime

from ..models.notifications import (
    NotificationPreferences, NotificationChannel, 
    TradingSignalAlert, PortfolioAlert, MarketAlert, GeopoliticalAlert
)
from ..models.trading import TradingSignal, Portfolio, Position
from ..models.market_data import MOEXMarketData
from ..services.alert_manager import AlertManager, create_alert_manager, send_test_alerts
from ..config.alert_config import AlertConfig


async def demonstrate_alert_system():
    """Demonstrate the Russian market alert system"""
    
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
    
    # Create alert configuration
    config = AlertConfig(
        # Email configuration (replace with real credentials)
        email_smtp_server="smtp.gmail.com",
        email_smtp_port=587,
        email_username="your_email@gmail.com",
        email_password="your_app_password",
        email_from_address="russian_trading_bot@example.com",
        
        # Telegram configuration (replace with real bot token)
        telegram_bot_token="YOUR_TELEGRAM_BOT_TOKEN",
        
        # SMS configuration (replace with real API key)
        sms_api_key="YOUR_SMS_API_KEY",
        
        # Alert thresholds
        trading_signal_confidence_threshold=0.7,
        portfolio_loss_threshold=0.05,
        portfolio_gain_threshold=0.10,
        market_volatility_threshold=0.03
    )
    
    # Create alert manager
    alert_manager = AlertManager(config)
    
    # Set up user preferences
    user_preferences = NotificationPreferences(
        user_id="demo_user",
        email="user@example.com",
        telegram_chat_id="123456789",  # Replace with real chat ID
        phone_number="+79001234567",   # Replace with real phone number
        
        # Configure notification channels for different alert types
        trading_signals=[NotificationChannel.EMAIL, NotificationChannel.TELEGRAM],
        portfolio_alerts=[NotificationChannel.EMAIL, NotificationChannel.TELEGRAM, NotificationChannel.SMS],
        market_alerts=[NotificationChannel.EMAIL, NotificationChannel.TELEGRAM],
        geopolitical_alerts=[NotificationChannel.EMAIL, NotificationChannel.TELEGRAM],
        
        # Set thresholds
        min_trading_signal_confidence=0.75,
        portfolio_loss_threshold=0.05,
        portfolio_gain_threshold=0.10,
        market_volatility_threshold=0.03
    )
    
    # Register user preferences
    alert_manager.register_user_preferences("demo_user", user_preferences)
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # Demonstrate trading signal alerts
    logger.info("\nüìà –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # Create sample trading signals
    buy_signal = TradingSignal(
        symbol="SBER",
        action="BUY",
        current_price=Decimal("250.50"),
        target_price=Decimal("280.00"),
        stop_loss=Decimal("230.00")
    )
    
    sell_signal = TradingSignal(
        symbol="GAZP",
        action="SELL",
        current_price=Decimal("180.75"),
        target_price=Decimal("160.00"),
        stop_loss=Decimal("190.00")
    )
    
    # Send trading signal alerts
    await alert_manager.send_trading_signal_alert(
        "demo_user", buy_signal, 0.85,
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥. RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏, MACD –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É."
    )
    
    await alert_manager.send_trading_signal_alert(
        "demo_user", sell_signal, 0.78,
        "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–π. –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –≥–∞–∑ –º–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–∏–±—ã–ª—å."
    )
    
    logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    
    # Demonstrate portfolio alerts
    logger.info("\nüíº –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é...")
    
    # Create sample portfolio
    portfolio = Portfolio(
        positions={
            "SBER": Position(
                symbol="SBER",
                quantity=100,
                average_price=Decimal("240.00"),
                current_price=Decimal("250.50"),
                market_value=Decimal("25050.00"),
                unrealized_pnl=Decimal("1050.00")
            ),
            "GAZP": Position(
                symbol="GAZP",
                quantity=50,
                average_price=Decimal("190.00"),
                current_price=Decimal("180.75"),
                market_value=Decimal("9037.50"),
                unrealized_pnl=Decimal("-462.50")
            )
        },
        cash_balance=Decimal("50000.00"),
        total_value=Decimal("84087.50"),
        total_pnl=Decimal("587.50")
    )
    
    # Send portfolio alerts
    await alert_manager.send_portfolio_alert(
        "demo_user", portfolio, "–û–ë–ù–û–í–õ–ï–ù–ò–ï_–ü–û–†–¢–§–ï–õ–Ø"
    )
    
    # Simulate portfolio loss alert
    portfolio.total_pnl = Decimal("-5000.00")
    portfolio.total_value = Decimal("79087.50")
    
    await alert_manager.send_portfolio_alert(
        "demo_user", portfolio, "–ü–†–ï–í–´–®–ï–ù_–ü–û–†–û–ì_–£–ë–´–¢–ö–û–í", Decimal("84000.00")
    )
    
    logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    
    # Demonstrate market alerts
    logger.info("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    # Create sample market data
    market_data = [
        MOEXMarketData(
            symbol="SBER",
            price=Decimal("250.50"),
            volume=1500000,
            timestamp=datetime.now(),
            change_percent=0.08,  # 8% increase
            previous_close=Decimal("232.00")
        ),
        MOEXMarketData(
            symbol="GAZP",
            price=Decimal("180.75"),
            volume=2000000,
            timestamp=datetime.now(),
            change_percent=-0.06,  # 6% decrease
            previous_close=Decimal("192.00")
        )
    ]
    
    # Monitor market conditions
    market_alerts = await alert_manager.monitor_and_alert_market_conditions(
        market_data, ["demo_user"]
    )
    
    logger.info(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(market_alerts.get('demo_user', []))} –∞–ª–µ—Ä—Ç–æ–≤")
    
    # Demonstrate geopolitical alerts
    logger.info("\nüåç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    geo_alerts = await alert_manager.monitor_and_alert_geopolitical_events(["demo_user"])
    
    logger.info(f"‚úÖ –ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(geo_alerts.get('demo_user', []))} –∞–ª–µ—Ä—Ç–æ–≤")
    
    # Demonstrate custom alerts
    logger.info("\nüîî –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    await alert_manager.send_custom_alert(
        "demo_user",
        "–°–ò–°–¢–ï–ú–ê_–ó–ê–ü–£–©–ï–ù–ê",
        "–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω",
        "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω."
    )
    
    await alert_manager.send_custom_alert(
        "demo_user",
        "–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï_–û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï",
        "–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å 02:00 –¥–æ 04:00 –ú–°–ö. –¢–æ—Ä–≥–æ–≤–ª—è –±—É–¥–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
    )
    
    logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    
    # Show alert statistics
    logger.info("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:")
    stats = alert_manager.get_alert_statistics()
    for key, value in stats.items():
        logger.info(f"  {key}: {value}")
    
    # Perform health check
    logger.info("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:")
    health = await alert_manager.health_check()
    logger.info(f"  –°—Ç–∞—Ç—É—Å: {health['status']}")
    logger.info(f"  –í—Ä–µ–º—è: {health['timestamp']}")
    
    for service, status in health.get('services', {}).items():
        logger.info(f"  {service}: {status['status']}")
    
    logger.info("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


async def test_individual_notifications():
    """Test individual notification channels"""
    
    logger = logging.getLogger(__name__)
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    # Create alert manager
    alert_manager = await create_alert_manager()
    
    # Set up test user
    test_preferences = NotificationPreferences(
        user_id="test_user",
        email="test@example.com",
        telegram_chat_id="123456789",
        phone_number="+79001234567"
    )
    
    alert_manager.register_user_preferences("test_user", test_preferences)
    
    # Send test alerts
    test_results = await send_test_alerts(alert_manager, "test_user")
    
    logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for alert_type, success in test_results.items():
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
        logger.info(f"  {alert_type}: {status}")


async def demonstrate_telegram_bot():
    """Demonstrate Telegram bot functionality"""
    
    logger = logging.getLogger(__name__)
    logger.info("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
    
    from ..services.notification_service import TelegramBot
    from ..models.notifications import TradingSignalAlert, PortfolioAlert
    
    # Create Telegram bot (replace with real token)
    bot = TelegramBot("YOUR_TELEGRAM_BOT_TOKEN")
    
    # Test chat ID (replace with real chat ID)
    test_chat_id = "123456789"
    
    # Send simple message
    await bot.send_message(test_chat_id, "üîî –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
    
    # Send formatted trading signal
    signal_data = TradingSignalAlert(
        symbol="SBER",
        action="BUY",
        confidence=0.85,
        current_price=Decimal("250.50"),
        target_price=Decimal("280.00"),
        stop_loss=Decimal("230.00"),
        reasoning="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
    )
    
    await bot.send_trading_signal(test_chat_id, signal_data)
    
    # Send portfolio update
    portfolio_data = PortfolioAlert(
        alert_type="–û–ë–ù–û–í–õ–ï–ù–ò–ï_–ü–û–†–¢–§–ï–õ–Ø",
        current_value=Decimal("1250000.00"),
        change_amount=Decimal("25000.00"),
        change_percent=0.02
    )
    
    await bot.send_portfolio_update(test_chat_id, portfolio_data)
    
    logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


if __name__ == "__main__":
    # Run the demonstration
    asyncio.run(demonstrate_alert_system())
    
    # Uncomment to test individual components
    # asyncio.run(test_individual_notifications())
    # asyncio.run(demonstrate_telegram_bot())