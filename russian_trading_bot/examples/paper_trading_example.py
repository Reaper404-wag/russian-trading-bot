"""
Example usage of the paper trading engine for Russian stock market.

This example demonstrates how to:
1. Set up and configure paper trading
2. Connect to live market data
3. Run automated trading strategies
4. Monitor performance in real-time
5. Analyze results
"""

import sys
import os
import time
import threading
from datetime import datetime, timedelta
from decimal import Decimal
import logging

# Add the parent directory to the path to import modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.paper_trading_engine import PaperTradingEngine, PaperTradingConfig, PaperTradingStatus
from services.ai_decision_engine import AIDecisionEngine, DecisionWeights
from models.trading import TradingSignal, OrderAction
from models.market_data import MarketData

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class MockMarketDataProvider:
    """Mock market data provider that simulates live MOEX data"""
    
    def __init__(self):
        self.base_prices = {
            'SBER': Decimal('250.0'),
            'GAZP': Decimal('180.0'),
            'LKOH': Decimal('6500.0'),
            'YNDX': Decimal('2800.0'),
            'MGNT': Decimal('5200.0'),
            'ROSN': Decimal('520.0'),
            'NVTK': Decimal('1100.0'),
            'TCSG': Decimal('3200.0')
        }
        self.price_history = {symbol: [] for symbol in self.base_prices}
        self.start_time = datetime.now()
    
    def get_market_data(self, symbols):
        """Simulate live market data with realistic price movements"""
        import random
        import numpy as np
        
        current_time = datetime.now()
        elapsed_minutes = (current_time - self.start_time).total_seconds() / 60
        
        market_data = {}
        
        for symbol in symbols:
            if symbol not in self.base_prices:
                continue
            
            base_price = self.base_prices[symbol]
            
            # Simulate intraday price movement with trend and noise
            trend = np.sin(elapsed_minutes * 0.1) * 0.02  # 2% trend component
            noise = random.gauss(0, 0.01)  # 1% random noise
            
            # Add some volatility spikes occasionally
            if random.random() < 0.05:  # 5% chance of volatility spike
                noise *= 3
            
            price_change = trend + noise
            current_price = base_price * (1 + price_change)
            
            # Ensure price doesn't go negative
            current_price = max(current_price, base_price * 0.5)
            
            # Update base price slowly to simulate longer-term trends
            self.base_prices[symbol] = self.base_prices[symbol] * (1 + price_change * 0.1)
            
            # Generate volume (higher volume during volatility)
            base_volume = 100000
            volume_multiplier = 1 + abs(price_change) * 10
            volume = int(base_volume * volume_multiplier * random.uniform(0.5, 2.0))
            
            market_data[symbol] = MarketData(
                symbol=symbol,
                timestamp=current_time,
                price=current_price,
                volume=volume,
                bid=current_price * Decimal('0.999'),
                ask=current_price * Decimal('1.001'),
                currency="RUB"
            )
            
            # Store price history
            self.price_history[symbol].append((current_time, current_price))
            
            # Keep only last 1000 price points
            if len(self.price_history[symbol]) > 1000:
                self.price_history[symbol] = self.price_history[symbol][-1000:]
        
        return market_data
    
    def get_price_history(self, symbol, minutes=60):
        """Get price history for a symbol"""
        if symbol not in self.price_history:
            return []
        
        cutoff_time = datetime.now() - timedelta(minutes=minutes)
        return [(t, p) for t, p in self.price_history[symbol] if t >= cutoff_time]


def create_ai_engine():
    """Create AI decision engine with Russian market configuration"""
    weights = DecisionWeights(
        technical_weight=0.4,
        sentiment_weight=0.2,  # Lower weight since we don't have real news
        fundamental_weight=0.2,
        volume_weight=0.1,
        market_conditions_weight=0.1
    )
    return AIDecisionEngine(weights)


def create_paper_trading_config():
    """Create paper trading configuration"""
    return PaperTradingConfig(
        initial_capital=Decimal('1000000'),  # 1M RUB
        commission_rate=0.0005,              # 0.05% commission (typical for Russian brokers)
        slippage_rate=0.001,                 # 0.1% slippage
        max_position_size=0.15,              # 15% max position size
        min_confidence=0.65,                 # 65% minimum confidence
        
        # Risk management
        stop_loss_pct=0.05,                  # 5% stop loss
        take_profit_pct=0.15,                # 15% take profit
        max_drawdown_limit=0.20,             # 20% max drawdown
        max_daily_trades=8,                  # Max 8 trades per day
        
        # Timing
        update_interval=10,                  # Update every 10 seconds
        market_hours_only=False,             # Allow trading anytime for demo
        
        # Strategy
        position_sizing_method="confidence_weighted",
        auto_execute=True,
        log_all_signals=True,
        daily_reports=True
    )


class PaperTradingMonitor:
    """Monitor and display paper trading performance"""
    
    def __init__(self, engine: PaperTradingEngine):
        self.engine = engine
        self.running = False
        self.monitor_thread = None
    
    def start_monitoring(self):
        """Start monitoring thread"""
        self.running = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.monitor_thread.start()
        logger.info("Performance monitoring started")
    
    def stop_monitoring(self):
        """Stop monitoring thread"""
        self.running = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
        logger.info("Performance monitoring stopped")
    
    def _monitor_loop(self):
        """Main monitoring loop"""
        last_report_time = datetime.now()
        
        while self.running:
            try:
                current_time = datetime.now()
                
                # Generate report every 30 seconds
                if (current_time - last_report_time).total_seconds() >= 30:
                    self._generate_status_report()
                    last_report_time = current_time
                
                time.sleep(5)  # Check every 5 seconds
                
            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
                time.sleep(10)
    
    def _generate_status_report(self):
        """Generate and display status report"""
        try:
            status = self.engine.get_current_status()
            
            print("\n" + "="*60)
            print("–û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò PAPER TRADING")
            print("="*60)
            print(f"–°—Ç–∞—Ç—É—Å: {status['status'].upper()}")
            print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status.get('duration_hours', 0):.1f} —á–∞—Å–æ–≤")
            print(f"–¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: {status.get('current_capital', 0):,.0f} ‚ÇΩ")
            print(f"–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {status.get('total_return', 0):.2%}")
            print(f"P&L: {status.get('total_pnl', 0):,.0f} ‚ÇΩ")
            
            print(f"\n–¢–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
            print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {status.get('total_trades', 0)}")
            print(f"–°–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {status.get('daily_trades', 0)}/{status.get('max_daily_trades', 0)}")
            print(f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {status.get('open_positions', 0)}")
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {status.get('win_rate', 0):.1%}")
            
            # Show open positions
            positions = self.engine.get_open_positions()
            if positions:
                print(f"\n–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
                print(f"{'–°–∏–º–≤–æ–ª':<8} {'–î–µ–π—Å—Ç–≤–∏–µ':<8} {'–ö–æ–ª-–≤–æ':<8} {'–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞':<12} {'–¢–µ–∫—É—â–∞—è P&L':<12}")
                print("-" * 60)
                
                for pos in positions:
                    print(f"{pos['symbol']:<8} {pos['action']:<8} {pos['quantity']:<8} "
                          f"{pos['entry_price']:<12.2f} {pos['unrealized_pnl']:<12.0f}")
            
            # Show recent trades
            recent_trades = self.engine.get_trade_history(limit=5)
            if recent_trades:
                print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:")
                print(f"{'–°–∏–º–≤–æ–ª':<8} {'–î–µ–π—Å—Ç–≤–∏–µ':<8} {'P&L':<12} {'–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è':<15}")
                print("-" * 50)
                
                for trade in recent_trades[-5:]:
                    pnl = trade.get('realized_pnl', 0) or 0
                    exit_reason = trade.get('exit_reason', '–æ—Ç–∫—Ä—ã—Ç–∞')
                    print(f"{trade['symbol']:<8} {trade['action']:<8} {pnl:<12.0f} {exit_reason:<15}")
            
            print("="*60)
            
        except Exception as e:
            logger.error(f"Error generating status report: {e}")


def setup_callbacks(engine: PaperTradingEngine):
    """Set up event callbacks for the paper trading engine"""
    
    def on_trade_executed(trade):
        logger.info(f"üîÑ –°–î–ï–õ–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê: {trade.action.value} {trade.quantity} {trade.symbol} "
                   f"–ø–æ —Ü–µ–Ω–µ {trade.execution_price} ‚ÇΩ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trade.signal_confidence:.1%})")
        print(f"üí∞ –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {trade.symbol} - {trade.reasoning}")
    
    def on_position_closed(trade):
        pnl = trade.realized_pnl or 0
        pnl_emoji = "üìà" if pnl > 0 else "üìâ"
        logger.info(f"{pnl_emoji} –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê: {trade.symbol} P&L: {pnl:.0f} ‚ÇΩ ({trade.exit_reason})")
        print(f"üîö –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {trade.symbol}: {pnl:+.0f} ‚ÇΩ")
    
    def on_signal_generated(signal):
        logger.debug(f"üìä –°–ò–ì–ù–ê–õ: {signal.action.value} {signal.symbol} "
                    f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%}) - {signal.reasoning[:50]}...")
    
    def on_error(error):
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {error}")
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: {error}")
    
    engine.on_trade_executed = on_trade_executed
    engine.on_position_closed = on_position_closed
    engine.on_signal_generated = on_signal_generated
    engine.on_error = on_error


def run_basic_paper_trading():
    """Run basic paper trading example"""
    print("üöÄ –ó–ê–ü–£–°–ö –ë–ê–ó–û–í–û–ì–û PAPER TRADING")
    print("="*50)
    
    # Create components
    ai_engine = create_ai_engine()
    config = create_paper_trading_config()
    paper_engine = PaperTradingEngine(ai_engine, config)
    market_provider = MockMarketDataProvider()
    
    # Setup
    paper_engine.set_market_data_provider(market_provider.get_market_data)
    paper_engine.set_symbols(['SBER', 'GAZP', 'LKOH', 'YNDX', 'MGNT'])
    
    # Setup callbacks
    setup_callbacks(paper_engine)
    
    # Start monitoring
    monitor = PaperTradingMonitor(paper_engine)
    monitor.start_monitoring()
    
    try:
        # Start paper trading session
        session_id = paper_engine.start_session("–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
        print(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {session_id}")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–µ–Ω")
        print("‚è∞ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 2 –º–∏–Ω—É—Ç—ã...")
        print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        # Run for 2 minutes
        time.sleep(120)
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    finally:
        # Stop everything
        monitor.stop_monitoring()
        paper_engine.stop_session()
        
        # Generate final report
        print("\n" + "="*60)
        print("–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print("="*60)
        
        if paper_engine.current_session:
            summary = paper_engine.current_session.get_summary()
            
            print(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {summary['duration_hours']:.1f} —á–∞—Å–æ–≤")
            print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {summary['initial_capital']:,.0f} ‚ÇΩ")
            print(f"–ö–æ–Ω–µ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {summary['current_capital']:,.0f} ‚ÇΩ")
            print(f"–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {summary['total_return']:.2%}")
            print(f"P&L: {summary['total_pnl']:+,.0f} ‚ÇΩ")
            print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {summary['total_trades']}")
            print(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {summary['winning_trades']}")
            print(f"–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {summary['losing_trades']}")
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {summary['win_rate']:.1%}")
            print(f"–°–¥–µ–ª–æ–∫ –≤ —á–∞—Å: {summary['trades_per_hour']:.1f}")
            
            # Export session data
            try:
                filename = paper_engine.export_session_data()
                print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {filename}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        
        print("\nüèÅ Paper trading –∑–∞–≤–µ—Ä—à–µ–Ω!")


def run_strategy_comparison():
    """Compare different paper trading strategies"""
    print("üî¨ –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô PAPER TRADING")
    print("="*50)
    
    strategies = [
        {
            'name': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è',
            'config': PaperTradingConfig(
                initial_capital=Decimal('1000000'),
                min_confidence=0.8,
                max_position_size=0.08,
                stop_loss_pct=0.03,
                take_profit_pct=0.10,
                max_daily_trades=5
            )
        },
        {
            'name': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è',
            'config': PaperTradingConfig(
                initial_capital=Decimal('1000000'),
                min_confidence=0.6,
                max_position_size=0.20,
                stop_loss_pct=0.08,
                take_profit_pct=0.25,
                max_daily_trades=15
            )
        },
        {
            'name': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
            'config': PaperTradingConfig(
                initial_capital=Decimal('1000000'),
                min_confidence=0.7,
                max_position_size=0.12,
                stop_loss_pct=0.05,
                take_profit_pct=0.15,
                max_daily_trades=10
            )
        }
    ]
    
    results = []
    market_provider = MockMarketDataProvider()
    
    for strategy in strategies:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy['name']}")
        
        # Create engine for this strategy
        ai_engine = create_ai_engine()
        paper_engine = PaperTradingEngine(ai_engine, strategy['config'])
        
        # Setup
        paper_engine.set_market_data_provider(market_provider.get_market_data)
        paper_engine.set_symbols(['SBER', 'GAZP', 'LKOH', 'YNDX'])
        
        try:
            # Run strategy for 1 minute
            session_id = paper_engine.start_session(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy['name']}")
            time.sleep(60)
            paper_engine.stop_session()
            
            # Collect results
            if paper_engine.current_session:
                summary = paper_engine.current_session.get_summary()
                results.append((strategy['name'], summary))
                
                print(f"‚úÖ {strategy['name']}: {summary['total_return']:.2%} –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, "
                      f"{summary['total_trades']} —Å–¥–µ–ª–æ–∫")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy['name']}: {e}")
    
    # Display comparison
    print("\n" + "="*80)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*80)
    print(f"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<15} {'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å':<12} {'–°–¥–µ–ª–æ–∫':<8} {'–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö':<12} {'P&L (‚ÇΩ)':<12}")
    print("-"*80)
    
    for name, summary in results:
        print(f"{name:<15} {summary['total_return']:>10.2%} "
              f"{summary['total_trades']:>7} {summary['win_rate']:>10.1%} "
              f"{summary['total_pnl']:>10.0f}")
    
    print("="*80)


def run_risk_analysis():
    """Analyze risk management in paper trading"""
    print("‚ö†Ô∏è  –ê–ù–ê–õ–ò–ó –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ò–°–ö–ê–ú–ò")
    print("="*50)
    
    # Test different risk settings
    risk_configs = [
        ('–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫', {'stop_loss_pct': 0.02, 'take_profit_pct': 0.06, 'max_position_size': 0.05}),
        ('–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫', {'stop_loss_pct': 0.05, 'take_profit_pct': 0.15, 'max_position_size': 0.10}),
        ('–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫', {'stop_loss_pct': 0.10, 'take_profit_pct': 0.30, 'max_position_size': 0.25})
    ]
    
    market_provider = MockMarketDataProvider()
    results = []
    
    for risk_name, risk_params in risk_configs:
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {risk_name}")
        
        # Create config with risk parameters
        config = create_paper_trading_config()
        for param, value in risk_params.items():
            setattr(config, param, value)
        
        ai_engine = create_ai_engine()
        paper_engine = PaperTradingEngine(ai_engine, config)
        
        # Setup
        paper_engine.set_market_data_provider(market_provider.get_market_data)
        paper_engine.set_symbols(['SBER', 'GAZP', 'LKOH'])
        
        try:
            # Run for 1 minute
            session_id = paper_engine.start_session(f"–†–∏—Å–∫-—Ç–µ—Å—Ç {risk_name}")
            time.sleep(60)
            paper_engine.stop_session()
            
            if paper_engine.current_session:
                summary = paper_engine.current_session.get_summary()
                results.append((risk_name, summary))
                
                print(f"‚úÖ {risk_name}: {summary['total_return']:.2%} –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {risk_name}: {e}")
    
    # Display risk analysis
    print("\n" + "="*70)
    print("–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í")
    print("="*70)
    print(f"{'–ü—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞':<15} {'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å':<12} {'–°–¥–µ–ª–æ–∫':<8} {'–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö':<12}")
    print("-"*70)
    
    for name, summary in results:
        print(f"{name:<15} {summary['total_return']:>10.2%} "
              f"{summary['total_trades']:>7} {summary['win_rate']:>10.1%}")
    
    print("="*70)


def main():
    """Main function to run paper trading examples"""
    print("–°–ò–°–¢–ï–ú–ê PAPER TRADING –î–õ–Ø –†–û–°–°–ò–ô–°–ö–û–ì–û –†–´–ù–ö–ê")
    print("="*60)
    
    try:
        # Ask user which example to run
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("1. –ë–∞–∑–æ–≤—ã–π paper trading (2 –º–∏–Ω—É—Ç—ã)")
        print("2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print("3. –ê–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏")
        print("4. –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
        
        if choice == '1':
            run_basic_paper_trading()
        elif choice == '2':
            run_strategy_comparison()
        elif choice == '3':
            run_risk_analysis()
        elif choice == '4':
            run_basic_paper_trading()
            print("\n" + "="*60 + "\n")
            run_strategy_comparison()
            print("\n" + "="*60 + "\n")
            run_risk_analysis()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞...")
            run_basic_paper_trading()
        
        print("\nüéâ –í–°–ï –ü–†–ò–ú–ï–†–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("- Paper trading –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ —Ä–∏—Å–∫–∞")
        print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π")
        print("- –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)