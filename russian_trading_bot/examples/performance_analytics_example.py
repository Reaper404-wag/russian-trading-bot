"""
Example usage of Russian market performance analytics service
"""

from datetime import datetime, timedelta
from decimal import Decimal
import random

from russian_trading_bot.services.performance_analytics import (
    PerformanceAnalyticsService,
    RussianIndex,
    RussianSector
)


def generate_sample_data():
    """Generate sample portfolio and benchmark data"""
    # Generate 90 days of sample data
    base_date = datetime(2024, 1, 1)
    timestamps = [base_date + timedelta(days=i) for i in range(90)]
    
    # Simulate portfolio returns with some volatility
    random.seed(42)  # For reproducible results
    portfolio_returns = []
    for i in range(90):
        # Add some trend and noise
        trend = 0.0005  # Slight positive trend
        noise = random.gauss(0, 0.015)  # 1.5% daily volatility
        portfolio_returns.append(trend + noise)
    
    # Generate portfolio values
    initial_value = 5000000.0  # 5M RUB
    portfolio_values = [initial_value]
    for ret in portfolio_returns:
        portfolio_values.append(portfolio_values[-1] * (1 + ret))
    
    # Generate MOEX returns (slightly less volatile)
    moex_returns = []
    for i in range(90):
        trend = 0.0003  # Slightly lower trend
        noise = random.gauss(0, 0.012)  # 1.2% daily volatility
        moex_returns.append(trend + noise)
    
    # Generate RTS returns (more volatile, USD-denominated)
    rts_returns = []
    for i in range(90):
        trend = 0.0004
        noise = random.gauss(0, 0.018)  # 1.8% daily volatility
        rts_returns.append(trend + noise)
    
    # Sample portfolio positions
    positions = {
        "SBER": 1500000.0,  # Banking - 30%
        "GAZP": 1000000.0,  # Oil & Gas - 20%
        "LKOH": 750000.0,   # Oil & Gas - 15%
        "GMKN": 500000.0,   # Metals & Mining - 10%
        "VTBR": 400000.0,   # Banking - 8%
        "YNDX": 350000.0,   # Technology - 7%
        "MTSS": 300000.0,   # Telecom - 6%
        "MGNT": 200000.0,   # Consumer - 4%
    }
    
    return {
        "portfolio_returns": portfolio_returns,
        "portfolio_values": portfolio_values,
        "positions": positions,
        "moex_returns": moex_returns,
        "rts_returns": rts_returns,
        "timestamps": timestamps
    }


def main():
    """Demonstrate performance analytics functionality"""
    print("=== –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===\n")
    
    # Initialize the service
    analytics_service = PerformanceAnalyticsService()
    
    # Generate sample data
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
    data = generate_sample_data()
    
    print(f"–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {len(data['timestamps'])} –¥–Ω–µ–π")
    print(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {data['portfolio_values'][0]:,.0f} ‚ÇΩ")
    print(f"–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {data['portfolio_values'][-1]:,.0f} ‚ÇΩ")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(data['positions'])}")
    print()
    
    # Calculate comprehensive analytics
    print("–†–∞—Å—á–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    analytics = analytics_service.calculate_comprehensive_analytics(
        portfolio_returns=data["portfolio_returns"],
        portfolio_values=data["portfolio_values"],
        positions=data["positions"],
        moex_returns=data["moex_returns"],
        rts_returns=data["rts_returns"],
        timestamps=data["timestamps"]
    )
    
    # Generate and display the report
    print("\n" + "="*60)
    report = analytics_service.generate_performance_report(analytics)
    print(report)
    print("="*60)
    
    # Demonstrate individual metric access
    print("\n=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö ===\n")
    
    print("–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
    print(f"  ‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {analytics.total_return:.2%}")
    print(f"  ‚Ä¢ –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {analytics.annualized_return:.2%}")
    print(f"  ‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≥–æ–¥–æ–≤–∞—è): {analytics.volatility:.2%}")
    print(f"  ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {analytics.sharpe_ratio:.3f}")
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {analytics.max_drawdown:.2%}")
    print(f"  ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª—å–º–∞—Ä–∞: {analytics.calmar_ratio:.3f}")
    print(f"  ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ: {analytics.sortino_ratio:.3f}")
    print(f"  ‚Ä¢ –î–æ–ª—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {analytics.win_rate:.2%}")
    print(f"  ‚Ä¢ –§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏: {analytics.profit_factor:.3f}")
    print()
    
    print("–°–†–ê–í–ù–ï–ù–ò–ï –° –†–û–°–°–ò–ô–°–ö–ò–ú–ò –ò–ù–î–ï–ö–°–ê–ú–ò:")
    print("  MOEX Russia Index:")
    print(f"    - –ê–ª—å—Ñ–∞ (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏): {analytics.moex_comparison.alpha:.2%}")
    print(f"    - –ë–µ—Ç–∞ (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å): {analytics.moex_comparison.beta:.3f}")
    print(f"    - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {analytics.moex_comparison.correlation:.3f}")
    print(f"    - –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {analytics.moex_comparison.tracking_error:.2%}")
    print(f"    - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {analytics.moex_comparison.information_ratio:.3f}")
    print()
    
    print("  RTS Index:")
    print(f"    - –ê–ª—å—Ñ–∞ (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏): {analytics.rts_comparison.alpha:.2%}")
    print(f"    - –ë–µ—Ç–∞ (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å): {analytics.rts_comparison.beta:.3f}")
    print(f"    - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {analytics.rts_comparison.correlation:.3f}")
    print(f"    - –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {analytics.rts_comparison.tracking_error:.2%}")
    print(f"    - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {analytics.rts_comparison.information_ratio:.3f}")
    print()
    
    print("–ê–ù–ê–õ–ò–ó –ü–û –°–ï–ö–¢–û–†–ê–ú –†–û–°–°–ò–ô–°–ö–û–ì–û –†–´–ù–ö–ê:")
    for sector, perf in analytics.sector_performance.items():
        sector_name = sector.value.replace('_', ' ').title()
        print(f"  {sector_name}:")
        print(f"    - –î–æ–ª—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {perf.weight_in_portfolio:.2%}")
        print(f"    - –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {perf.total_return:.2%}")
        print(f"    - –î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {perf.daily_return:.2%}")
        print(f"    - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {perf.volatility:.2%}")
        print(f"    - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {perf.sharpe_ratio:.3f}")
        print(f"    - –ê–∫—Ü–∏–∏: {', '.join(perf.stocks)}")
        print()
    
    print("–†–ò–°–ö-–ú–ï–¢–†–ò–ö–ò:")
    for metric, value in analytics.risk_adjusted_metrics.items():
        metric_name = metric.replace('_', ' ').title()
        if 'var' in metric.lower() or 'alpha' in metric.lower():
            print(f"  ‚Ä¢ {metric_name}: {value:.2%}")
        else:
            print(f"  ‚Ä¢ {metric_name}: {value:.3f}")
    print()
    
    # Demonstrate sector mappings
    print("=== –ú–ê–ü–ü–ò–ù–ì –†–û–°–°–ò–ô–°–ö–ò–• –ê–ö–¶–ò–ô –ü–û –°–ï–ö–¢–û–†–ê–ú ===\n")
    sector_groups = {}
    for symbol, sector in analytics_service.sector_mappings.items():
        if sector not in sector_groups:
            sector_groups[sector] = []
        sector_groups[sector].append(symbol)
    
    for sector, symbols in sector_groups.items():
        sector_name = sector.value.replace('_', ' ').title()
        print(f"{sector_name}: {', '.join(sorted(symbols))}")
    print()
    
    # Performance interpretation
    print("=== –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===\n")
    
    if analytics.sharpe_ratio > 1.0:
        print("‚úÖ –û–¢–õ–ò–ß–ù–´–ô –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (>1.0) - –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞")
    elif analytics.sharpe_ratio > 0.5:
        print("‚úÖ –•–û–†–û–®–ò–ô –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (>0.5) - –ø—Ä–∏–µ–º–ª–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–∞")
    else:
        print("‚ö†Ô∏è  –ù–ò–ó–ö–ò–ô –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (<0.5) - —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    
    if analytics.max_drawdown > -0.10:
        print("‚úÖ –£–ú–ï–†–ï–ù–ù–ê–Ø –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (<10%) - —Ö–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–æ–≤")
    elif analytics.max_drawdown > -0.20:
        print("‚ö†Ô∏è  –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–ê–Ø –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (10-20%) - —Å—Ç–æ–∏—Ç —É—Å–∏–ª–∏—Ç—å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")
    else:
        print("üö® –í–´–°–û–ö–ê–Ø –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (>20%) - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")
    
    if analytics.moex_comparison.alpha > 0.02:
        print("‚úÖ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–ê–Ø –∞–ª—å—Ñ–∞ –∫ MOEX (>2%) - –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç —Ä—ã–Ω–æ–∫")
    elif analytics.moex_comparison.alpha > 0:
        print("‚úÖ –ù–ï–ë–û–õ–¨–®–ê–Ø –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∞–ª—å—Ñ–∞ –∫ MOEX - –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–ª–µ–≥–∫–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç —Ä—ã–Ω–æ–∫")
    else:
        print("‚ö†Ô∏è  –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–ê–Ø –∞–ª—å—Ñ–∞ –∫ MOEX - –ø–æ—Ä—Ç—Ñ–µ–ª—å –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç —Ä—ã–Ω–∫–∞")
    
    if analytics.win_rate > 0.6:
        print("‚úÖ –í–´–°–û–ö–ê–Ø –¥–æ–ª—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –¥–Ω–µ–π (>60%) - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
    elif analytics.win_rate > 0.5:
        print("‚úÖ –•–û–†–û–®–ê–Ø –¥–æ–ª—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –¥–Ω–µ–π (>50%) - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
    else:
        print("‚ö†Ô∏è  –ù–ò–ó–ö–ê–Ø –¥–æ–ª—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –¥–Ω–µ–π (<50%) - —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥")
    
    print("\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===\n")
    
    # Sector diversification analysis
    max_sector_weight = max(perf.weight_in_portfolio for perf in analytics.sector_performance.values())
    if max_sector_weight > 0.4:
        print("‚ö†Ô∏è  –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø –†–ò–°–ö–û–í: –û–¥–∏–Ω —Å–µ–∫—Ç–æ—Ä –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª–µ–µ 40% –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ –¥—Ä—É–≥–∏–º —Å–µ–∫—Ç–æ—Ä–∞–º")
    
    # Volatility analysis
    if analytics.volatility > 0.25:
        print("‚ö†Ô∏è  –í–´–°–û–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨: –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 25%")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤")
    
    # Beta analysis
    if analytics.moex_comparison.beta > 1.5:
        print("‚ö†Ô∏è  –í–´–°–û–ö–ê–Ø –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ö –†–´–ù–ö–£: –ë–µ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1.5")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –¥–≤–∏–∂–µ–Ω–∏—è–º —Ä—ã–Ω–∫–∞")
    elif analytics.moex_comparison.beta < 0.5:
        print("‚ÑπÔ∏è  –ù–ò–ó–ö–ê–Ø –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ö –†–´–ù–ö–£: –ë–µ—Ç–∞ –º–µ–Ω–µ–µ 0.5")
        print("   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–ª–∞–±–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –æ–±—â–∏–º —Ä—ã–Ω–∫–æ–º")
    
    print("\n=== –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===\n")
    print("–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É")
    print("—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ä—ã–Ω–∫–µ —Å —É—á–µ—Ç–æ–º:")
    print("‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ (MOEX, RTS)")
    print("‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏")
    print("‚Ä¢ –†–∏—Å–∫-—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –∏ –≤–∞–ª—é—Ç–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤")
    print("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π!")


if __name__ == "__main__":
    main()