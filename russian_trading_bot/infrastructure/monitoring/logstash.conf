input {
  file {
    path => "/logs/trading_bot.log"
    start_position => "beginning"
    type => "trading_bot"
    codec => "json"
  }
  
  file {
    path => "/logs/moex_api.log"
    start_position => "beginning"
    type => "moex_api"
    codec => "json"
  }
  
  file {
    path => "/logs/news_analysis.log"
    start_position => "beginning"
    type => "news_analysis"
    codec => "json"
  }
  
  file {
    path => "/logs/risk_management.log"
    start_position => "beginning"
    type => "risk_management"
    codec => "json"
  }
  
  file {
    path => "/logs/trade_execution.log"
    start_position => "beginning"
    type => "trade_execution"
    codec => "json"
  }
}

filter {
  if [type] == "trading_bot" {
    mutate {
      add_field => { "service" => "russian_trading_bot" }
    }
    
    # Parse Russian timestamps
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS", "ISO8601" ]
      timezone => "Europe/Moscow"
    }
    
    # Extract trading symbols
    if [message] =~ /SBER|GAZP|LKOH|ROSN|NVTK|TATN|MGNT|YNDX|MAIL|OZON/ {
      grok {
        match => { "message" => "%{WORD:stock_symbol}" }
      }
    }
  }
  
  if [type] == "moex_api" {
    mutate {
      add_field => { "service" => "moex_integration" }
    }
    
    # Parse API response times
    grok {
      match => { "message" => "Response time: %{NUMBER:response_time:float}ms" }
    }
  }
  
  if [type] == "news_analysis" {
    mutate {
      add_field => { "service" => "russian_news_analysis" }
    }
    
    # Extract sentiment scores
    grok {
      match => { "message" => "Sentiment: %{NUMBER:sentiment_score:float}" }
    }
  }
  
  if [type] == "risk_management" {
    mutate {
      add_field => { "service" => "risk_management" }
    }
    
    # Extract risk levels
    grok {
      match => { "message" => "Risk level: %{WORD:risk_level}" }
    }
  }
  
  if [type] == "trade_execution" {
    mutate {
      add_field => { "service" => "trade_execution" }
    }
    
    # Extract trade details
    grok {
      match => { "message" => "Trade: %{WORD:action} %{NUMBER:quantity:int} %{WORD:symbol} at %{NUMBER:price:float}" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "russian-trading-bot-%{+YYYY.MM.dd}"
  }
  
  # Output to stdout for debugging
  stdout {
    codec => rubydebug
  }
}