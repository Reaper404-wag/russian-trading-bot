#!/usr/bin/env python3
"""
Russian Trading Bot - Main Application Entry Point
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ä—ã–Ω–∫–µ
"""

import asyncio
import logging
import os
import sys
from datetime import datetime, timezone
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from russian_trading_bot.config.settings import load_settings
from russian_trading_bot.database.migrations import run_migrations
from russian_trading_bot.services.market_monitor import MarketMonitor
from russian_trading_bot.services.news_aggregator import NewsAggregator
from russian_trading_bot.services.ai_decision_engine import AIDecisionEngine
from russian_trading_bot.services.risk_manager import RiskManager
from russian_trading_bot.services.portfolio_manager import PortfolioManager
from russian_trading_bot.services.notification_service import NotificationService
from russian_trading_bot.infrastructure.maintenance.maintenance_orchestrator import RussianTradingMaintenanceOrchestrator

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/app/logs/trading_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class RussianTradingBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞"""
    
    def __init__(self):
        self.settings = None
        self.market_monitor = None
        self.news_aggregator = None
        self.ai_engine = None
        self.risk_manager = None
        self.portfolio_manager = None
        self.notification_service = None
        self.maintenance_orchestrator = None
        self.running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Russian Trading Bot...")
        
        try:
            # Load settings
            self.settings = load_settings()
            logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # Run database migrations
            await run_migrations()
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            
            # Initialize core services
            self.market_monitor = MarketMonitor(self.settings)
            self.news_aggregator = NewsAggregator(self.settings)
            self.ai_engine = AIDecisionEngine(self.settings)
            self.risk_manager = RiskManager(self.settings)
            self.portfolio_manager = PortfolioManager(self.settings)
            self.notification_service = NotificationService(self.settings)
            
            # Initialize maintenance system
            self.maintenance_orchestrator = RussianTradingMaintenanceOrchestrator()
            await self.maintenance_orchestrator.__aenter__()
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # Send startup notification
            await self.notification_service.send_notification(
                "üá∑üá∫ Russian Trading Bot –∑–∞–ø—É—â–µ–Ω",
                f"–°–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ä—ã–Ω–∫–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –≤ {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}",
                "info"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
            
    async def start_trading(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        logger.info("üìà –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
        self.running = True
        
        # Start maintenance monitoring
        maintenance_task = asyncio.create_task(
            self.maintenance_orchestrator.start_monitoring()
        )
        
        # Main trading loop
        while self.running:
            try:
                # 1. Monitor market conditions
                market_data = await self.market_monitor.get_market_snapshot()
                
                # 2. Analyze news sentiment
                news_sentiment = await self.news_aggregator.get_sentiment_analysis()
                
                # 3. Make AI-powered trading decisions
                trading_signals = await self.ai_engine.generate_signals(
                    market_data, news_sentiment
                )
                
                # 4. Apply risk management
                filtered_signals = await self.risk_manager.filter_signals(trading_signals)
                
                # 5. Execute trades through portfolio manager
                if filtered_signals:
                    await self.portfolio_manager.execute_trades(filtered_signals)
                
                # 6. Log activity
                logger.info(f"–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: {len(filtered_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
                # Wait before next cycle (5 minutes)
                await asyncio.sleep(300)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                await self.notification_service.send_notification(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ",
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    "error"
                )
                await asyncio.sleep(60)  # Wait 1 minute before retry
                
        # Cleanup
        maintenance_task.cancel()
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Russian Trading Bot...")
        self.running = False
        
        # Send shutdown notification
        if self.notification_service:
            await self.notification_service.send_notification(
                "üî¥ Russian Trading Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                f"–°–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}",
                "warning"
            )
        
        # Cleanup maintenance orchestrator
        if self.maintenance_orchestrator:
            await self.maintenance_orchestrator.__aexit__(None, None, None)
            
        logger.info("‚úÖ Russian Trading Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def run_health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        health_status = {
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'components': {}
        }
        
        # Check each component
        components = [
            ('market_monitor', self.market_monitor),
            ('news_aggregator', self.news_aggregator),
            ('ai_engine', self.ai_engine),
            ('risk_manager', self.risk_manager),
            ('portfolio_manager', self.portfolio_manager),
            ('notification_service', self.notification_service)
        ]
        
        for name, component in components:
            try:
                if hasattr(component, 'health_check'):
                    status = await component.health_check()
                else:
                    status = 'healthy' if component else 'unhealthy'
                health_status['components'][name] = status
                logger.info(f"  {name}: {status}")
            except Exception as e:
                health_status['components'][name] = f'error: {e}'
                logger.error(f"  {name}: error - {e}")
                
        # Overall status
        unhealthy_count = sum(1 for status in health_status['components'].values() 
                            if 'error' in str(status) or status == 'unhealthy')
        
        if unhealthy_count == 0:
            health_status['overall'] = 'healthy'
        elif unhealthy_count < len(components) / 2:
            health_status['overall'] = 'degraded'
        else:
            health_status['overall'] = 'unhealthy'
            
        logger.info(f"–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {health_status['overall']}")
        return health_status

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    bot = RussianTradingBot()
    
    try:
        # Initialize the bot
        await bot.initialize()
        
        # Run health check
        health_status = await bot.run_health_check()
        
        if health_status['overall'] in ['healthy', 'degraded']:
            # Start trading
            await bot.start_trading()
        else:
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.")
            
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()

if __name__ == "__main__":
    # Set up Russian locale
    os.environ.setdefault('LANG', 'ru_RU.UTF-8')
    os.environ.setdefault('TZ', 'Europe/Moscow')
    
    # Run the bot
    asyncio.run(main())