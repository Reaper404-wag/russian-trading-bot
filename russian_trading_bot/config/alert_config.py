"""
Configuration for Russian market alert system
"""

from typing import Dict, List, Any
from dataclasses import dataclass
from ..models.notifications import NotificationChannel, NotificationPriority


@dataclass
class AlertConfig:
    """Configuration for alert system"""
    
    # Email configuration
    email_smtp_server: str = "smtp.gmail.com"
    email_smtp_port: int = 587
    email_username: str = ""
    email_password: str = ""
    email_from_address: str = ""
    
    # Telegram configuration
    telegram_bot_token: str = ""
    telegram_api_url: str = "https://api.telegram.org/bot"
    
    # SMS configuration (SMS.ru)
    sms_api_key: str = ""
    sms_api_url: str = "https://sms.ru/sms/send"
    
    # Alert thresholds
    trading_signal_confidence_threshold: float = 0.7
    portfolio_loss_threshold: float = 0.05  # 5%
    portfolio_gain_threshold: float = 0.10  # 10%
    market_volatility_threshold: float = 0.03  # 3%
    volume_spike_threshold: float = 2.0  # 2x average
    price_movement_threshold: float = 0.05  # 5%
    
    # Alert cooldown periods (minutes)
    trading_signal_cooldown: int = 15
    portfolio_alert_cooldown: int = 30
    market_alert_cooldown: int = 30
    geopolitical_alert_cooldown: int = 60
    
    # Quiet hours (Moscow time)
    quiet_hours_start: str = "22:00"
    quiet_hours_end: str = "08:00"
    
    # Priority settings
    critical_alert_channels: List[NotificationChannel] = None
    high_priority_channels: List[NotificationChannel] = None
    medium_priority_channels: List[NotificationChannel] = None
    low_priority_channels: List[NotificationChannel] = None
    
    def __post_init__(self):
        """Initialize default channel priorities"""
        if self.critical_alert_channels is None:
            self.critical_alert_channels = [
                NotificationChannel.EMAIL,
                NotificationChannel.TELEGRAM,
                NotificationChannel.SMS
            ]
        
        if self.high_priority_channels is None:
            self.high_priority_channels = [
                NotificationChannel.EMAIL,
                NotificationChannel.TELEGRAM
            ]
        
        if self.medium_priority_channels is None:
            self.medium_priority_channels = [
                NotificationChannel.EMAIL,
                NotificationChannel.TELEGRAM
            ]
        
        if self.low_priority_channels is None:
            self.low_priority_channels = [
                NotificationChannel.EMAIL
            ]
    
    def get_channels_for_priority(self, priority: NotificationPriority) -> List[NotificationChannel]:
        """Get notification channels for priority level"""
        if priority == NotificationPriority.CRITICAL:
            return self.critical_alert_channels
        elif priority == NotificationPriority.HIGH:
            return self.high_priority_channels
        elif priority == NotificationPriority.MEDIUM:
            return self.medium_priority_channels
        else:
            return self.low_priority_channels
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for service initialization"""
        return {
            'email': {
                'smtp_server': self.email_smtp_server,
                'smtp_port': self.email_smtp_port,
                'username': self.email_username,
                'password': self.email_password,
                'from_email': self.email_from_address
            },
            'telegram': {
                'bot_token': self.telegram_bot_token,
                'api_url': self.telegram_api_url
            },
            'sms': {
                'api_key': self.sms_api_key,
                'api_url': self.sms_api_url
            },
            'thresholds': {
                'trading_signal_confidence': self.trading_signal_confidence_threshold,
                'portfolio_loss': self.portfolio_loss_threshold,
                'portfolio_gain': self.portfolio_gain_threshold,
                'market_volatility': self.market_volatility_threshold,
                'volume_spike': self.volume_spike_threshold,
                'price_movement': self.price_movement_threshold
            },
            'cooldowns': {
                'trading_signal': self.trading_signal_cooldown,
                'portfolio_alert': self.portfolio_alert_cooldown,
                'market_alert': self.market_alert_cooldown,
                'geopolitical_alert': self.geopolitical_alert_cooldown
            },
            'quiet_hours': {
                'start': self.quiet_hours_start,
                'end': self.quiet_hours_end
            }
        }


# Default Russian market alert templates
RUSSIAN_ALERT_TEMPLATES = {
    "trading_signal_email": {
        "subject": "üîî –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {action} {symbol}",
        "body": """
–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:

üìà –ê–∫—Ü–∏—è: {symbol}
üéØ –î–µ–π—Å—Ç–≤–∏–µ: {action}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}
üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price}
üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss}
üìà –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {expected_return}
‚ö†Ô∏è –†–∏—Å–∫: {risk_score}

üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
{reasoning}

–í—Ä–µ–º—è: {timestamp}
        """.strip()
    },
    
    "trading_signal_telegram": {
        "subject": "üîî –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {action} {symbol}",
        "body": """
üîî *–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª*

üìà *–ê–∫—Ü–∏—è:* `{symbol}`
üéØ *–î–µ–π—Å—Ç–≤–∏–µ:* *{action}*
üìä *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* `{confidence}`
üí∞ *–¶–µ–Ω–∞:* `{current_price}`
üéØ *–¶–µ–ª—å:* `{target_price}`
üõ°Ô∏è *–°—Ç–æ–ø-–ª–æ—Å—Å:* `{stop_loss}`

üí° *–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:*
_{reasoning}_

‚è∞ {timestamp}
        """.strip()
    },
    
    "trading_signal_sms": {
        "subject": "–°–∏–≥–Ω–∞–ª: {action} {symbol}",
        "body": "üîî {action} {symbol} –ø–æ {current_price}. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}. –¶–µ–ª—å: {target_price}"
    },
    
    "portfolio_alert_email": {
        "subject": "‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å: {alert_type}",
        "body": """
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:

üìä –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {alert_type}
üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_value}
üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_amount} ({change_percent})
üéØ –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {threshold_value}
üìã –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {affected_positions}

–í—Ä–µ–º—è: {timestamp}
        """.strip()
    },
    
    "portfolio_alert_telegram": {
        "subject": "‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å: {alert_type}",
        "body": """
‚ö†Ô∏è *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é*

üìä *–¢–∏–ø:* {alert_type}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* `{current_value}`
üìà *–ò–∑–º–µ–Ω–µ–Ω–∏–µ:* `{change_amount} ({change_percent})`
üìã *–ü–æ–∑–∏—Ü–∏–∏:* {affected_positions}

‚è∞ {timestamp}
        """.strip()
    },
    
    "portfolio_alert_sms": {
        "subject": "–ü–æ—Ä—Ç—Ñ–µ–ª—å: {alert_type}",
        "body": "‚ö†Ô∏è {alert_type}: {current_value} ({change_percent})"
    },
    
    "market_alert_email": {
        "subject": "üìä –†—ã–Ω–æ–∫: {alert_type} - {symbol}",
        "body": """
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞:

üìä –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {alert_type}
üìà –ê–∫—Ü–∏—è: {symbol}
üí∞ –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}
üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent}
üéØ –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {threshold_value}
üå°Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {market_condition}

–í—Ä–µ–º—è: {timestamp}
        """.strip()
    },
    
    "market_alert_telegram": {
        "subject": "üìä –†—ã–Ω–æ–∫: {alert_type}",
        "body": """
üìä *–†—ã–Ω–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*

üîî *–°–æ–±—ã—Ç–∏–µ:* {alert_type}
üìà *–ê–∫—Ü–∏—è:* `{symbol}`
üí∞ *–ó–Ω–∞—á–µ–Ω–∏–µ:* `{current_value}`
üìà *–ò–∑–º–µ–Ω–µ–Ω–∏–µ:* `{change_percent}`
üå°Ô∏è *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* {market_condition}

‚è∞ {timestamp}
        """.strip()
    },
    
    "geopolitical_alert_email": {
        "subject": "üåç –ì–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞: {event_type}",
        "body": """
–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∞–∂–Ω–æ–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ:

üåç –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}
‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {severity}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üè≠ –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Å–µ–∫—Ç–æ—Ä—ã: {affected_sectors}
üìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫: {market_impact}

–í—Ä–µ–º—è: {timestamp}
        """.strip()
    },
    
    "geopolitical_alert_telegram": {
        "subject": "üåç –ì–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞: {event_type}",
        "body": """
üåç *–ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ*

üîî *–¢–∏–ø:* {event_type}
‚ö†Ô∏è *–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:* {severity}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}
üè≠ *–°–µ–∫—Ç–æ—Ä—ã:* {affected_sectors}
üìä *–í–ª–∏—è–Ω–∏–µ:* {market_impact}

‚è∞ {timestamp}
        """.strip()
    }
}


# Russian market specific alert keywords
RUSSIAN_MARKET_KEYWORDS = {
    'high_volatility': [
        '–≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', '—Ä–µ–∑–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è', '–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
        '—Å–∏–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è', '–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫'
    ],
    'volume_spike': [
        '–≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞', '–Ω–µ–æ–±—ã—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–±—ä–µ–º—ã',
        '–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è', '–±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã'
    ],
    'price_movement': [
        '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç', '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ', '—Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ',
        '—Å–∏–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ', '—Å–∫–∞—á–æ–∫ —Ü–µ–Ω—ã'
    ],
    'portfolio_loss': [
        '–ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ —É–±—ã—Ç–∫–æ–≤', '–±–æ–ª—å—à–∏–µ –ø–æ—Ç–µ—Ä–∏', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–±—ã—Ç–∫–∏',
        '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ', '–ø–∞–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è'
    ],
    'portfolio_gain': [
        '–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏', '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å', '—Ö–æ—Ä–æ—à–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
        '—Ä–æ—Å—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è', '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞'
    ],
    'geopolitical_risk': [
        '—Å–∞–Ω–∫—Ü–∏–∏', '–≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏', '–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
        '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', '—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã'
    ]
}


def load_alert_config_from_env() -> AlertConfig:
    """Load alert configuration from environment variables"""
    import os
    
    return AlertConfig(
        email_smtp_server=os.getenv('ALERT_EMAIL_SMTP_SERVER', 'smtp.gmail.com'),
        email_smtp_port=int(os.getenv('ALERT_EMAIL_SMTP_PORT', '587')),
        email_username=os.getenv('ALERT_EMAIL_USERNAME', ''),
        email_password=os.getenv('ALERT_EMAIL_PASSWORD', ''),
        email_from_address=os.getenv('ALERT_EMAIL_FROM', ''),
        
        telegram_bot_token=os.getenv('ALERT_TELEGRAM_BOT_TOKEN', ''),
        
        sms_api_key=os.getenv('ALERT_SMS_API_KEY', ''),
        
        trading_signal_confidence_threshold=float(os.getenv('ALERT_SIGNAL_CONFIDENCE_THRESHOLD', '0.7')),
        portfolio_loss_threshold=float(os.getenv('ALERT_PORTFOLIO_LOSS_THRESHOLD', '0.05')),
        portfolio_gain_threshold=float(os.getenv('ALERT_PORTFOLIO_GAIN_THRESHOLD', '0.10')),
        market_volatility_threshold=float(os.getenv('ALERT_MARKET_VOLATILITY_THRESHOLD', '0.03')),
        
        quiet_hours_start=os.getenv('ALERT_QUIET_HOURS_START', '22:00'),
        quiet_hours_end=os.getenv('ALERT_QUIET_HOURS_END', '08:00')
    )